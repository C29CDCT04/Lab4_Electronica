#include <driver/ledc.h>
#include <Arduino.h>

// Pines para los botones
const int BSelec = 32;
const int BBrillo = 33;
//Pines para los leds
const int ledr = 4; //rojo
const int ledv = 19; //verde
const int leda = 22; //azul
// Variable para seleccionar el color actual
int colorActual = 0; 
// 0: Rojo, 1: Verde, 2: Azul

void setup() {
  pinMode(BSelec, INPUT_PULLUP);
  pinMode(BBrillo, INPUT_PULLUP);
  pinMode(ledr, OUTPUT);
  pinMode(ledv, OUTPUT);
  pinMode(leda, OUTPUT);

  // Configurar PWM
  ledcSetup(0, 5000, 8);
  ledcSetup(1, 5000, 8);
  ledcSetup(2, 5000, 8);

  // Asignar canales PWM
  ledcAttachPin(ledr, 0);
  ledcAttachPin(ledv, 1);
  ledcAttachPin(leda, 2);

}

void loop() {
  static int brillo[3] = {0, 0, 0}; // Brillo para R, G, B
  static bool lastEstadoBBrillo = HIGH;
  static unsigned long lastDebounceTime = 0;
  unsigned long debounceDelay = 50;

  // Leer estado de los botones
  bool estadoBSelec = digitalRead(BSelec);
  bool estadoBBrillo = digitalRead(BBrillo);

  // Manejar selecci贸n de color con bot贸n B3
  if (estadoBSelec == LOW) {
    colorActual = (colorActual + 1) % 3;
    delay(200); // Debouncing/anti-bounce simple
  }

  // Ajustar brillo con bot贸n B4
  if (estadoBBrillo == LOW && lastEstadoBBrillo == HIGH && (millis() - lastDebounceTime) > debounceDelay) {
    lastDebounceTime = millis();
    brillo[colorActual] = (brillo[colorActual] + 32) % 256;
    ledcWrite(colorActual, brillo[colorActual]);
  }

  // Actualizar el estado anterior del bot贸n BBrillo
  lastEstadoBBrillo = estadoBBrillo;
}
